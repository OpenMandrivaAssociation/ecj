--- ecj-4.2.1/org/eclipse/jdt/internal/compiler/batch/GCCMain.java.0003~	2008-08-13 19:46:30.000000000 +0200
+++ ecj-4.2.1/org/eclipse/jdt/internal/compiler/batch/GCCMain.java	2013-02-13 00:28:40.297358295 +0100
@@ -30,6 +30,7 @@ import org.eclipse.jdt.internal.compiler
 import org.eclipse.jdt.internal.compiler.env.AccessRule;
 import org.eclipse.jdt.internal.compiler.env.AccessRuleSet;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
+import org.eclipse.jdt.internal.compiler.problem.ProblemSeverities;
 import org.eclipse.jdt.internal.compiler.util.Messages;
 import org.eclipse.jdt.internal.compiler.util.SuffixConstants;
 
@@ -76,7 +77,7 @@ public class GCCMain extends Main {
 		System.exit(1);
 	}
 
-	public CompilationUnit[] getCompilationUnits() throws InvalidInputException {
+	public CompilationUnit[] getCompilationUnits() {
 		CompilationUnit[] units = super.getCompilationUnits();
 		for (int i = 0; i < units.length; ++i)
 			this.commandLineCompilationUnits.add(units[i]);
@@ -187,7 +188,7 @@ public class GCCMain extends Main {
 		}
 	}
 
-	protected void handleWarningToken(String token, boolean isEnabling) throws InvalidInputException {
+	protected void handleWarningToken(String token, boolean isEnabling) {
 		// Recognize this for compatibility with older versions of gcj.
 		if ("deprecated".equals(token)) //$NON-NLS-1$
 			token = "deprecation"; //$NON-NLS-1$
@@ -270,7 +271,7 @@ public class GCCMain extends Main {
 		}
 	}
 
-	private void handleWall(boolean enable) throws InvalidInputException {
+	private void handleWall(boolean enable) throws IllegalArgumentException {
 		// A somewhat arbitrary list.  We use the GCC names
 		// here, and the local handleWarningToken translates
 		// for us.
@@ -294,7 +295,7 @@ public class GCCMain extends Main {
 		handleWarningToken("forbidden", enable);
 	}
 
-	public void configure(String[] argv) throws InvalidInputException {
+	public void configure(String[] argv) {
 		if ((argv == null) || (argv.length == 0)) {
 			// This is a "can't happen".
 			System.exit(1);
@@ -316,7 +317,7 @@ public class GCCMain extends Main {
 				try { // ensure encoding is supported
 					new InputStreamReader(new ByteArrayInputStream(new byte[0]), encoding);
 				} catch (UnsupportedEncodingException e) {
-					throw new InvalidInputException(
+					throw new IllegalArgumentException(
 						this.bind("configure.unsupportedEncoding", encoding)); //$NON-NLS-1$
 				}
 				this.options.put(CompilerOptions.OPTION_Encoding, encoding);
@@ -327,7 +328,7 @@ public class GCCMain extends Main {
 					errorMessage.append("-d"); //$NON-NLS-1$
 					errorMessage.append(' ');
 					errorMessage.append(arg);
-					throw new InvalidInputException(
+					throw new IllegalArgumentException(
 						this.bind("configure.duplicateOutputPath", errorMessage.toString())); //$NON-NLS-1$
 				}
 				this.setDestinationPath(arg);
@@ -336,12 +337,12 @@ public class GCCMain extends Main {
 			} else if (currentArg.equals("-fzip-target")) { //$NON-NLS-1$
 				++i;
 				if (i >= argv.length)
-					throw new InvalidInputException(this.bind("gcc.zipArg")); //$NON-NLS-1$
+					throw new IllegalArgumentException(this.bind("gcc.zipArg")); //$NON-NLS-1$
 				this.zipDestination = argv[i];
 			} else if (currentArg.equals("-fzip-dependency")) { //$NON-NLS-1$
 				++i;
 				if (i >= argv.length)
-					throw new InvalidInputException(this.bind("gcc.zipDepArg")); //$NON-NLS-1$
+					throw new IllegalArgumentException(this.bind("gcc.zipDepArg")); //$NON-NLS-1$
 				this.zipDependencyDestination = argv[i];
 			} else if (currentArg.startsWith("-g")) { //$NON-NLS-1$
 				if (currentArg.equals("-g0")) { //$NON-NLS-1$
@@ -384,7 +385,7 @@ public class GCCMain extends Main {
 				} else if (currentArg.equals("1.6") || currentArg.equals("6") || currentArg.equals("6.0")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$
 					this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_6);
 				} else {
-					throw new InvalidInputException(this.bind("configure.source", currentArg)); //$NON-NLS-1$
+					throw new IllegalArgumentException(this.bind("configure.source", currentArg)); //$NON-NLS-1$
 				}
 			} else if (currentArg.startsWith("-ftarget=")) { //$NON-NLS-1$
 				currentArg = getArgument(currentArg);
@@ -403,7 +404,7 @@ public class GCCMain extends Main {
 				} else if (currentArg.equals("jsr14")) { //$NON-NLS-1$
 					this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_JSR14);
 				} else {
-					throw new InvalidInputException(this.bind("configure.targetJDK", currentArg)); //$NON-NLS-1$
+					throw new IllegalArgumentException(this.bind("configure.targetJDK", currentArg)); //$NON-NLS-1$
 				}
 			} else if (currentArg.equals("-ffilelist-file")) { //$NON-NLS-1$
 				haveFileList = true;
@@ -430,7 +431,7 @@ public class GCCMain extends Main {
 		// Classpath processing.
 		ArrayList result = new ArrayList();
 		if (classpath == null)
-			throw new InvalidInputException(this.bind("gcc.noClasspath")); //$NON-NLS-1$
+			throw new IllegalArgumentException(this.bind("gcc.noClasspath")); //$NON-NLS-1$
 		parsePath(result, classpath);
 
 		// We must always create both output files, even if one is not used.
@@ -443,7 +444,7 @@ public class GCCMain extends Main {
 		}
 
 		if (inhibitAllWarnings)
-			disableWarnings();
+			disableAll(ProblemSeverities.Warning);
 		if (treatWarningsAsErrors)
 			turnWarningsToErrors();
 
